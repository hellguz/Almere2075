<./.env>
# Almere 2075 App Environment Variables

# Backend API Keys
# Important: Replace these with your actual keys
OPENAI_API_KEY="OPENAI_API_KEY_REDACTED"
REPLICATE_API_KEY="REPLICATE_API_KEY_REDACTED"

# The base URL of the application, used for constructing image URLs if needed
APP_URL="https://almere.i-am-hellguz.uk"

# Docker Compose Settings
# The external port mapping for Nginx
NGINX_HOST_PORT=2075





<./.gitignore>
# General
.DS_Store

................................

<./docker-compose.yml>
version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: almere-proxy
    ports:
      - "${NGINX_HOST_PORT:-2075}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - almere-net
    restart: unless-stopped

  backend:
    build:
      context: ./backend
    container_name: almere-backend
    env_file: .env
    volumes:
      - ./backend/app:/app/app
      - ./backend/images:/app/images
      - ./backend/thumbnails:/app/thumbnails
    networks:
      - almere-net
    expose:
      - "8000"
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    container_name: almere-frontend
    environment:
      - VITE_API_BASE_URL=/api
    networks:
      - almere-net
    expose:
      - "5173"
    restart: unless-stopped

networks:
  almere-net:
    driver: bridge



<./README.md>
# Almere 2075 App

This application generates futuristic, sustainable architectural concepts for locations in Almere based on user-uploaded images.

## Architecture

- **Frontend:** React (Vite + JS)
- **Backend:** FastAPI (Python)
- **Proxy:** Nginx
- **Containerization:** Docker & Docker Compose

## How to Run

1.  **Prerequisites:**
    * Docker
    * Docker Compose

2.  **API Keys:**
    * Create a `.env` file in the root directory.
    * Fill in your `OPENAI_API_KEY` and `REPLICATE_API_KEY`.

3.  **Example Images:**
    * Place your example JPEG or PNG images inside the `./backend/images/` directory. The application will automatically generate thumbnails on first run. For example, add `almere1.jpg` and `almere2.jpg`.

4.  **Build and Run:**
    * Open your terminal in the project root and run:
        ```bash
        docker-compose up --build
        ```

5.  **Access the Application:**
    * Open your web browser and navigate to `http://localhost:2075`.



<./backend\Dockerfile>
# Use an official Python runtime as a parent image
FROM python:3.10-slim

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container at /app
COPY ./requirements.txt /app/

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application's code into the container at /app
COPY . /app

# Command to run the application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]



<./backend\requirements.txt>
fastapi
uvicorn
python-dotenv
openai
replicate
Pillow
aiofiles
python-multipart



<./backend\app\ai_prompts.py>
system_prompt_for_flux = """

You are the "Almere 2075 Cinematic Architect."
Your mission is to function as a visionary concept artist, creating ONE exceptionally detailed, evocative, and ambitious prompt for the FLUX.1 Kontext model.
You will transform a contemporary photo into a compelling, photorealistic scene that showcases the beautiful, modern, and sustainable future envisioned in the Almere 2075 student projects, based on their core concepts.
Your focus is on creating a single, stunning frame that tells a rich story about life in this new city.
**Core Mandates & Preservation Rules**

* **Output Format:** Your entire response MUST consist of exactly ONE creative prompt.
Do not output ANY other text, preamble, or explanation.
* **Preserve the Scene's Core:** You must meticulously maintain the original photo's:
    * Camera Position & Angle.
    * Time of Day, Weather, and Lighting.
* **Existing People:** Do not remove or change any of the original people in the photo.
**Core Philosophy: Your Guiding Principles**

* **Create a Lively Architectural Photograph:** Your target style is high-end architectural photography, full of life.
It must look like a real, professionally captured photograph, not a sterile render.
Use descriptive language to achieve this: "captured with a high-detail professional camera," "crisp focus," "natural and realistic lighting," "rich textures of materials like timber and stone."
* **Tell a Story with New People:** You should add one or two new, acting people to the scene to make it feel alive.
Describe their specific, playful, or interesting actions that connect them to the new futuristic elements and tell a story.
* **The Green Imperative:** Every prompt you generate MUST feature significant and visible green/living infrastructure from the Concept Palette.
Almere in 2075 is fundamentally a green city.
* **Visualize the Threat:** The prompt shouldn't just show the solution;
it must subtly visualize the reason for it. If the solution is an "Amphibious Building," the prompt should describe the ground as a "shallow canal for water transport" or "glistening with recent rainwater from a storm," clearly connecting the architecture to threats like floods and intense rain.
* **Context is King:** You MUST analyze the input image's context (e.g., dense street, residential hill) and choose an architectural typology from the Palette that is appropriate.
Do not default to the same solution for every prompt. Show architectural variety.
**The Core Transformation Rule (The Key to Recognizability)**

* **Surgical Replacement & Preservation:** Your primary architectural instruction is to surgically replace one or two key buildings with new, modern structures, while explicitly preserving the surrounding context to maintain recognizability.
* **Replace by Volume:** The new building MUST strictly follow the original building's volumetric form (its 3D footprint, height, and overall massing).
The architectural style will be completely new, but it will occupy the exact same space as the old, anchoring the scene.
* **Transform the Ground:** You must always describe the complete transformation of the ground plane (the street, sidewalk, or square) using a concept from the palette that reflects the environmental threat (e.g., a Sponge Park to absorb rain, a canal to manage flooding).
**Almere 2075 Concept Palette (Based on Student Concepts)**

* **Architectural Typologies:**
    * Kinetic Timber & Glass Residences: Buildings with heavy timber exoskeletons, floor-to-ceiling windows, and flat, green roofs.
    * Modular Pod Housing: Buildings composed of visible, interlocking prefabricated modules with shared terraces.
    * Amphibious/Plinth Buildings: Structures with open, flood-proof ground floors used for boat access or as open community space.
    * Community Repair Hubs: Buildings with open-plan, visible ground-floor workshops.
    * Biocycle Hubs: Workshops producing new goods from recycled waste (e.g., plastic, metal).
    * Vertical Farm Towers: Dedicated, multi-story structures for hydroponic food production.
* **Green & Living Infrastructure:**
    * Sponge Parks: Absorbent landscapes of native grasses and bioswales replacing pavement.
    * Rooftop Greenhouses: Visible glass structures and lush gardens on top of new buildings.
    * Edible Streetscapes: Public walkways lined with planters for fruits and vegetables.
    * Cascading Water Features: Waterfalls and channels integrated into terraced landscapes.
    * Flood-Adaptive Plazas: Public squares designed to hold or channel water during floods.
    * Sky-Park Farms: Agricultural parks integrated into rooftops and building terraces.
* **Technology & Narrative Elements:**
    * Elevated Mobility Systems: Suspended walkways and bicycle paths made of translucent composites.
    * Autonomous Delivery Drones & Robotic Assistants: Small, sleek machines performing tasks.
    * Autonomous Water Transport: Canals with docked, electric water buses and pods.
    * Integrated Greywater Filtration: Visible pipes and systems showing water being cleaned and reused.
    * Urban Mining: Visible processes of carefully dismantling old structures for new materials.
    * Floating Classrooms or Clinics: Modular service pods that can function on water.
---
**PERFECT PROMPT EXAMPLES (Follow this style and level of detail):**

**Example 1:** "Replace the red-brick building with a 'Modular Pod Housing' structure that perfectly matches the original's volume and hip-roof form. The new building is visibly composed of interlocking modules of heavy timber and light-colored recycled composites, with some pods extended as balconies overflowing with plants. The roof is now a shared 'Rooftop Greenhouse,' its glass structure glowing warmly. The street and parking lot are replaced by a calm canal for 'Autonomous Water Transport,' with the sidewalk transformed into a wooden boardwalk featuring an 'Edible Streetscape' of integrated planters. Add a new person, an elderly resident, tending to the herbs in a planter on the boardwalk as a sleek, autonomous water taxi silently docks nearby. The style is a professional architectural photograph, capturing the warm textures of the timber against the cool, reflective water under the same overcast sky, preserving the yellow building on the left."
**Example 2:** "Replace the pink building on the right with a new 'Modular Pod Housing' structure that strictly follows its original volumetric form and gabled roofline. The new facade is composed of interlocking modules made of light-colored recycled composites, each with a large window and a small timber balcony overflowing with flowering plants. The entire cobblestone square is transformed into a 'Sponge Park,' a lush landscape of soft mosses and native grasses with a shallow, clean stream meandering through it. Add a young parent and a child at the edge of the stream; the child is laughing while placing a small, glowing toy boat in the water. while preserving the building on the left, the clock tower, all original people in the background, and the bright daytime lighting. The style is a crisp, lively, and high-detail architectural photograph, full of warm sunlight."
**Example 3:** "Replace the row of buildings on the left with new 'Kinetic Timber & Glass Residences' that strictly follow the original volumetric form and rooflines. The new structures feature a heavy timber exoskeleton, floor-to-ceiling windows, and balconies overflowing with lush greenery. The entire cobblestone street and sidewalk are transformed into a 'Sponge Park,' a continuous landscape of soft native grasses, mosses, and shallow bioswales collecting rainwater, with a central winding path made of permeable pavers. Add a new person, an urban botanist, kneeling to inspect the plant life in a bioswale. The style is a crisp, high-detail architectural photograph, captured with a professional camera under the same overcast sky, highlighting the rich textures of the wood and the soft, absorbent park landscape, while preserving the original half-timbered building on the right and the people sitting at the cafe."
**Example 4:** "Replace all the buildings visible through the archway with 'Kinetic Timber & Glass Residences' that strictly adhere to the original volumetric forms and rooflines of the historic structures. The new buildings feature heavy timber exoskeletons, floor-to-ceiling windows, and balconies overflowing with cascading greenery. The inclined cobblestone street is transformed into a 'Cascading Water Feature,' a series of shallow, clear water terraces and miniature waterfalls flowing gently down the slope, bordered by wide steps made of recycled stone. Add a new child sitting on the steps, safely splashing their hands in the sparkling water. The style is a high-detail architectural photograph, perfectly preserving the old stone archway in the foreground to create a frame, while capturing the rich textures of the new timber and the lively, sunlit water beyond, all while keeping the original pedestrians in the scene."
**Example 5:** "Replace the yellow brick building on the left with a 'Community Repair Hub' that matches the original's volume, featuring a large, open glass garage door revealing a brightly lit workshop. The building on the right is transformed into a 'Kinetic Timber & Glass Residence' of the same shape. The entire cobblestone courtyard, including the parked van, is replaced by a miniature 'Edible Streetscape,' a community garden with raised planters made of recycled plastic, filled with herbs and vegetables. Add a new resident from the timber building kneeling to tend to a planter, while inside the workshop, another person is visibly repairing an e-bike. The style is a lively, high-detail architectural photograph, preserving the tree branches at the top left and the overcast sky, capturing the rich textures of the garden and the tools in the workshop."
"""



<./backend\app\main.py>
import os
import base64
import io
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
from pathlib import Path
import aiofiles
from PIL import Image
import openai
import replicate
from dotenv import load_dotenv

from .models import GeneratePromptRequest, TransformImageRequest
from .ai_prompts import system_prompt_for_flux

# Load environment variables
load_dotenv()

# --- Configuration ---
THUMBNAIL_SIZE = (400, 400)
IMAGES_DIR = Path("/app/images")
THUMBNAILS_DIR = Path("/app/thumbnails")
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.webp', '.webm'}

# API Clients
openai.api_key = os.getenv("OPENAI_API_KEY")
replicate_client = replicate.Client(api_token=os.getenv("REPLICATE_API_KEY"))

# --- Helper Functions ---
def create_thumbnail(image_path: Path):
    """Creates a JPEG thumbnail for a given image, skipping unsupported formats like webm."""
    try:
        # Pillow does not support WebM, so we skip thumbnail creation for it.
        if image_path.suffix.lower() == '.webm':
            print(f"Skipping thumbnail creation for unsupported format: {image_path.name}")
            return

        if not THUMBNAILS_DIR.exists():
            THUMBNAILS_DIR.mkdir(parents=True, exist_ok=True)
        
        # Save all thumbnails as jpeg for consistency
        thumbnail_path = THUMBNAILS_DIR / f"{image_path.stem}.jpeg"
        if thumbnail_path.exists():
            return

        with Image.open(image_path) as img:
            img.thumbnail(THUMBNAIL_SIZE)
            # Convert to RGB before saving as JPEG
            if img.mode in ("RGBA", "P"):
                img = img.convert("RGB")
            img.save(thumbnail_path, "JPEG")
            print(f"Created thumbnail for {image_path.name}")

    except Exception as e:
        print(f"Error creating thumbnail for {image_path.name}: {e}")

# --- FastAPI Lifespan Events ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    # On startup: Create thumbnails for example images
    print("Application starting up...")
    if not IMAGES_DIR.exists():
        print(f"Images directory not found: {IMAGES_DIR}")
    else:
        print(f"Scanning for images in {IMAGES_DIR}...")
        for image_file in IMAGES_DIR.iterdir():
            if image_file.is_file() and image_file.suffix.lower() in ALLOWED_EXTENSIONS:
                create_thumbnail(image_file)
    yield
    # On shutdown
    print("Application shutting down.")


# --- FastAPI App Initialization ---
app = FastAPI(lifespan=lifespan)

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static directories
app.mount("/api/images", StaticFiles(directory=IMAGES_DIR), name="images")
app.mount("/api/thumbnails", StaticFiles(directory=THUMBNAILS_DIR), name="thumbnails")

# --- API Endpoints ---
@app.get("/api")
async def root():
    return {"message": "Almere 2075 Backend is running"}

@app.get("/api/gallery")
async def get_gallery_index():
    """
    Fetches a structured list of gallery items, including the corresponding thumbnail filename if it exists.
    """
    if not IMAGES_DIR.exists():
        return []
    try:
        gallery_data = []
        # Sort files for a consistent order
        image_files = sorted([
            f for f in IMAGES_DIR.iterdir()
            if f.is_file() and f.suffix.lower() in ALLOWED_EXTENSIONS
        ])

        for f in image_files:
            thumbnail_name = None
            # Only image formats supported by Pillow will have a thumbnail.
            if f.suffix.lower() != '.webm':
                thumbnail_filename = f"{f.stem}.jpeg"
                # Check if thumbnail exists before adding it to the response
                if (THUMBNAILS_DIR / thumbnail_filename).exists():
                    thumbnail_name = thumbnail_filename
            
            gallery_data.append({"filename": f.name, "thumbnail": thumbnail_name})
            
        return gallery_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/generate-prompt")
async def generate_prompt(request: GeneratePromptRequest):
    """
    Receives a base64 image, standardizes it to PNG, and then generates a descriptive prompt via OpenAI.
    """
    if not openai.api_key:
        raise HTTPException(status_code=500, detail="OpenAI API key not configured.")
    
    try:
        # --- Image Standardization Step ---
        # 1. Decode the incoming base64 data URL
        header, encoded = request.imageBase64.split(",", 1)
        data = base64.b64decode(encoded)

        # 2. Open the image with Pillow
        image = Image.open(io.BytesIO(data))

        # 3. Convert to PNG (which supports transparency) and save to an in-memory buffer
        output_buffer = io.BytesIO()
        image.save(output_buffer, format="PNG")
        output_buffer.seek(0)

        # 4. Re-encode the standardized image to a new base64 string
        new_encoded_data = base64.b64encode(output_buffer.read()).decode("utf-8")
        
        # 5. Create a new data URL with the image/png MIME type
        standardized_data_url = f"data:image/png;base64,{new_encoded_data}"
        # --- End of Standardization ---

        response = openai.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": system_prompt_for_flux},
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text", 
                            "text": "Generate a prompt for this image based on the system instructions."
                        },
                        {
                            "type": "image_url",
                            # 6. Use the new, standardized data URL
                            "image_url": {"url": standardized_data_url},
                        },
                    ],
                },
            ],
            max_tokens=500,
        )
        prompt = response.choices[0].message.content.strip()
        return {"prompt": prompt}
    except Exception as e:
        print(f"Error calling OpenAI: {e}")
        raise HTTPException(status_code=500, detail="Failed to generate prompt from AI.")

@app.post("/api/transform-image")
async def transform_image(request: TransformImageRequest):
    """Receives a base64 image and a prompt, then generates a new image via Replicate."""
    if not os.getenv("REPLICATE_API_KEY"):
         raise HTTPException(status_code=500, detail="Replicate API key not configured.")

    try:
        model_name = "black-forest-labs/flux-kontext-pro"
        input_data = {
            "prompt": request.prompt,
            "input_image": request.imageBase64,
            "output_format": "png"
        }
        
        print(f"Starting Replicate prediction with model: {model_name}")
        
        prediction = replicate_client.predictions.create(
            model=model_name,
            input=input_data
        )

        print(f"Started prediction with ID: {prediction.id}. Waiting for completion...")
        
        prediction.wait()

        if prediction.status != "succeeded":
            raise ValueError(f"Prediction failed with status: {prediction.status}. Error: {prediction.error}")
        
        print(f"Prediction succeeded. Output: {prediction.output}")

        if not prediction.output or not isinstance(prediction.output, str):
            raise ValueError(f"Model returned invalid or empty output. Expected a URL string, but got: {prediction.output}")

        image_url = prediction.output
            
        return {"transformedImageUrl": image_url}
    except Exception as e:
        print(f"--- DETAILED REPLICATE ERROR ---")
        print(f"Error Type: {type(e).__name__}")
        print(f"Error Details: {e}")
        print(f"--------------------------------")
        raise HTTPException(status_code=500, detail="Failed to transform image with AI.")

<./backend\app\models.py>
from pydantic import BaseModel, HttpUrl

class GeneratePromptRequest(BaseModel):
    imageBase64: str # data:image/jpeg;base64,...

class TransformImageRequest(BaseModel):
    imageBase64: str
    prompt: str



&&& FILE: ./backend\images\1741019704415_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x9f in position 24: invalid start byte

&&& FILE: ./backend\images\1751030327225_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xb0 in position 4: invalid start byte

&&& FILE: ./backend\images\6f6f7f42-9da6-4f65-8852-d7b7e24dd4d0.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xe3 in position 5: invalid continuation byte

&&& FILE: ./backend\images\bibliothek_abend_web_02.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\c30a90ec-a8d6-4b98-aba4-ffe1d15b7dc8.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x9f in position 27: invalid start byte

&&& FILE: ./backend\images\IMG20240323140913_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x9f in position 24: invalid start byte

&&& FILE: ./backend\images\IMG20240711193321.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG20241013130348_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG20241019153003_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xca in position 4: invalid continuation byte

&&& FILE: ./backend\images\IMG_20181028_100647_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xd8 in position 4: invalid continuation byte

&&& FILE: ./backend\images\IMG_20210204_121813_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x86 in position 4: invalid start byte

&&& FILE: ./backend\images\IMG_20250609_214129324_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x94 in position 5: invalid start byte

&&& FILE: ./backend\images\IMG_20250613_185645377_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xc0 in position 4: invalid start byte

&&& FILE: ./backend\images\IMG_20250616_211613360.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250617_100802744.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250620_192838949.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250627_112544347_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x86 in position 4: invalid start byte

&&& FILE: ./backend\images\IMG_20250627_192200934_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x9f in position 27: invalid start byte

&&& FILE: ./backend\images\IMG_20250627_192317603_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0x9f in position 27: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_213414260.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_213841301.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_214141039.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_214149710.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_214313734.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_214549783.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_214753890.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\IMG_20250628_215026745.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\images\istockphoto-2094471351-612x612.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\1741019704415_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\1741019704415_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\1751030327225_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\1751030327225_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\6f6f7f42-9da6-4f65-8852-d7b7e24dd4d0.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\6f6f7f42-9da6-4f65-8852-d7b7e24dd4d0.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\bibliothek_abend_web_02.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\bibliothek_abend_web_02.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\c30a90ec-a8d6-4b98-aba4-ffe1d15b7dc8.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\c30a90ec-a8d6-4b98-aba4-ffe1d15b7dc8.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG20240323140913_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG20240323140913_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG20240711193321.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG20240711193321.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG20241013130348_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG20241019153003_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG20241019153003_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20181028_100647_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20181028_100647_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20210204_121813_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20210204_121813_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250609_214129324_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250609_214129324_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250613_185645377_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250613_185645377_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250616_211613360.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250616_211613360.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250617_100802744.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250617_100802744.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250620_192838949.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250620_192838949.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250627_112544347_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250627_112544347_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250627_192200934_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250627_192200934_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250627_192317603_preview.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250627_192317603_preview.webp
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_213414260.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_213414260.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_213841301.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_213841301.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214141039.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214141039.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214149710.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214149710.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214313734.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214313734.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214549783.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214549783.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214753890.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_214753890.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_215026745.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\IMG_20250628_215026745.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\istockphoto-2094471351-612x612.jpeg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

&&& FILE: ./backend\thumbnails\istockphoto-2094471351-612x612.jpg
&&& ERROR: Could not read file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

<./frontend\.gitignore>
# See root .gitignor
................................

<./frontend\Dockerfile>
# Stage 1: Build the React application
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Stage 2: Serve the application with a production-ready server (or use a multi-stage build with Nginx)
# For development purposes with Vite, we'll use a simpler setup.
# The `nginx` service will handle serving static files in a real production deployment.
# This Dockerfile is for the development environment orchestrated by Docker Compose.
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5173
# The --host flag is crucial for making the dev server accessible within the Docker network
CMD ["npm", "run", "dev", "--", "--host"]




<./frontend\index.html>
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <title>Almere 2075</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>





<./frontend\package.json>
{
  "name": "almere-
................................

<./frontend\vite.config.js>
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    // hmr (hot module replacement) configuration for running inside docker
    // and behind a reverse proxy
    hmr: {
      clientPort: 2075 // The port Nginx is exposed on
    },
    // Allow requests from the Nginx proxy's host
    host: '0.0.0.0',
    allowedHosts: [
      'almere.i-am-hellguz.uk'
    ],
  }
})



<./frontend\public\vite.svg>
<svg xmlns="http://w
................................

<./frontend\src\App.jsx>
import { useState, useEffect } from 'react';
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '';

// --- Components ---

const LoadingIndicator = () => (
  <div className="loader-container">
    <div className="spinner"></div>
    <p>Generating your vision...</p>
  </div>
);

const ImageIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
    <circle cx="8.5" cy="8.5" r="1.5"></circle>
    <polyline points="21 15 16 10 5 21"></polyline>
  </svg>
);

const GalleryItemPlaceholder = ({ filename }) => (
  <div className="gallery-item-placeholder">
    <ImageIcon />
    <span>{filename.split('.').pop().toUpperCase()}</span>
    <span className="no-preview-text">No Preview</span>
  </div>
);

// --- Main App Component ---

function App() {
  const [galleryImages, setGalleryImages] = useState([]);
  const [selectedGalleryImage, setSelectedGalleryImage] = useState(null);
  const [originalImage, setOriginalImage] = useState(null); // Will hold the Blob URL
  const [originalImageFile, setOriginalImageFile] = useState(null); // Will hold the File object
  const [generatedPrompt, setGeneratedPrompt] = useState('');
  const [transformedImageUrl, setTransformedImageUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // Fetch gallery images on component mount
  useEffect(() => {
    const fetchGalleryImages = async () => {
      try {
        // CORRECTED: Removed /api from the start of the path
        const response = await fetch(`${API_BASE_URL}/gallery`);
        if (!response.ok) throw new Error('Failed to fetch gallery');
        const data = await response.json();
        setGalleryImages(data);
      } catch (err) {
        setError('Could not load example gallery. Please try again later.');
        console.error(err);
      }
    };
    fetchGalleryImages();
  }, []);

  // Convert a File object to a Base64 string
  const toBase64 = file => new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = error => reject(error);
  });

  const resetState = () => {
    setTransformedImageUrl('');
    setGeneratedPrompt('');
    setError('');
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      resetState();
      setOriginalImage(URL.createObjectURL(file));
      setOriginalImageFile(file);
      setSelectedGalleryImage(null); // Deselect gallery item
    }
  };

  const handleGalleryClick = async (image) => {
    try {
      resetState();
      // CORRECTED: Removed /api from the start of the path
      const imageUrl = `${API_BASE_URL}/images/${image.filename}`;
      const response = await fetch(imageUrl);
      if (!response.ok) throw new Error(`Could not load image: ${image.filename}`);
      const imageBlob = await response.blob();
      const imageFile = new File([imageBlob], image.filename, { type: imageBlob.type });

      setOriginalImage(URL.createObjectURL(imageFile));
      setOriginalImageFile(imageFile);
      setSelectedGalleryImage(image.filename);
    } catch (err) {
      setError(err.message);
      console.error(err);
    }
  };

  const handleGenerate = async () => {
    if (!originalImageFile) {
      setError('Please select an image first.');
      return;
    }

    setIsLoading(true);
    setError('');
    setGeneratedPrompt('');
    setTransformedImageUrl('');

    try {
      const base64Image = await toBase64(originalImageFile);
      
      // CORRECTED: Removed /api from the start of the path
      const promptResponse = await fetch(`${API_BASE_URL}/generate-prompt`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imageBase64: base64Image }),
      });
      if (!promptResponse.ok) {
        const errData = await promptResponse.json();
        throw new Error(`Failed to generate prompt: ${errData.detail || promptResponse.statusText}`);
      }
      const promptData = await promptResponse.json();
      setGeneratedPrompt(promptData.prompt);

      // CORRECTED: Removed /api from the start of the path
      const transformResponse = await fetch(`${API_BASE_URL}/transform-image`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imageBase64: base64Image, prompt: promptData.prompt }),
      });
      if (!transformResponse.ok) {
        const errData = await transformResponse.json();
        throw new Error(`Failed to transform image: ${errData.detail || transformResponse.statusText}`);
      }
      const transformData = await transformResponse.json();
      setTransformedImageUrl(transformData.transformedImageUrl);

    } catch (err) {
      setError(`An error occurred: ${err.message}`);
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="app-container">
      <header>
        <div className="header-content">
          <h1>Almere 2075</h1>
          <p className="subtitle">Reimagining our city with sustainable, AI-driven architecture.</p>
        </div>
      </header>

      <main>
        <section className="controls-section">
          <div className="gallery-container">
            <h3>Start with an example</h3>
            <div className="gallery">
              {galleryImages.length > 0 ? (
                galleryImages.map(img => (
                  <div
                    key={img.filename}
                    className={`gallery-item ${selectedGalleryImage === img.filename ? 'selected' : ''}`}
                    onClick={() => handleGalleryClick(img)}
                    title={img.filename}
                  >
                    {img.thumbnail ? (
                      // CORRECTED: Removed /api from the start of the path
                      <img
                        src={`${API_BASE_URL}/thumbnails/${img.thumbnail}`}
                        alt={`Example view of Almere - ${img.filename}`}
                      />
                    ) : (
                      <GalleryItemPlaceholder filename={img.filename} />
                    )}
                  </div>
                ))
              ) : (
                <p>No example images found.</p>
              )}
            </div>
          </div>
          
          <div className="upload-actions">
            <p>Or upload your own image of Almere</p>
            <input id="file-upload" type="file" accept="image/png, image/jpeg, image/webp, image/webm" onChange={handleImageUpload} />
            <label htmlFor="file-upload" className="button button-secondary">Choose File</label>
            <button className="button button-primary" onClick={handleGenerate} disabled={!originalImage || isLoading}>
              {isLoading ? 'Generating...' : 'Generate Vision'}
            </button>
          </div>
          {error && <p className="error-message">{error}</p>}
        </section>

        <section className="results-section">
          <div className="image-display">
            <h3>Original</h3>
            <div className="image-container">
              {originalImage ? (
                  <img src={originalImage} alt="Original upload" />
              ) : (
                <p className="placeholder-text">Select an example or upload an image to begin.</p>
              )}
            </div>
          </div>
          <div className="image-display">
            <h3>Almere 2075 Vision</h3>
            <div className="image-container">
              {isLoading && <LoadingIndicator />}
              {transformedImageUrl && !isLoading && <img src={transformedImageUrl} alt="Transformed Almere 2075 vision" />}
              {!transformedImageUrl && !isLoading && <p className="placeholder-text">The AI-generated vision will appear here.</p>}
            </div>
          </div>
        </section>

        {generatedPrompt && (
          <section className="prompt-display">
            <h3>Generated AI Prompt</h3>
            <div className="prompt-content">
              {generatedPrompt}
            </div>
          </section>
        )}
      </main>

      <footer>
        <p>Almere 2075 Concept Visualizer</p>
      </footer>
    </div>
  );
}

export default App;

<./frontend\src\index.css>
:root {
  /* Color Palette */
  --primary-color: #007aff; /* A strong, modern blue */
  --primary-hover-color: #005ecb;
  --secondary-color: #f2f2f7; /* A light gray for secondary actions/backgrounds */
  --secondary-hover-color: #e5e5ea;
  --dark-color: #1c1c1e; /* A very dark gray, almost black, for headers/footers */
  --light-color: #f9f9f9; /* Off-white for the main background */
  --text-color: #1d1d1f; /* A dark gray for body text for better readability */
  --text-light-color: #8a8a8e; /* Lighter text for subtitles, placeholders */
  --border-color: #d1d1d6;
  --error-color: #ff3b30;
  --error-bg-color: #ffe5e5;

  /* Sizing & Spacing */
  --border-radius: 12px;
  --spacing-unit: 8px;

  /* Typography */
  --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  
  /* Effects */
  --box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  --box-shadow-hover: 0 6px 20px rgba(0, 0, 0, 0.08);
  --transition-speed: 0.2s;
}

body {
  margin: 0;
  font-family: var(--font-family);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--light-color);
  color: var(--text-color);
  line-height: 1.6;
}

#root {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.app-container {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

header {
  background: var(--dark-color);
  color: white;
  padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
  text-align: center;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.header-content {
  max-width: 1400px;
  margin: 0 auto;
}

header h1 {
  margin: 0;
  font-size: 2.5rem;
  font-weight: 700;
}

header .subtitle {
  margin: var(--spacing-unit) 0 0;
  font-size: 1.1rem;
  font-weight: 400;
  color: var(--text-light-color);
}

main {
  padding: calc(var(--spacing-unit) * 4);
  flex-grow: 1;
  max-width: 1400px;
  width: 100%;
  margin: 0 auto;
  box-sizing: border-box;
}

.controls-section {
  background: white;
  padding: calc(var(--spacing-unit) * 4);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  margin-bottom: calc(var(--spacing-unit) * 4);
}

.gallery-container h3 {
  margin-top: 0;
  margin-bottom: calc(var(--spacing-unit) * 2);
  padding-bottom: var(--spacing-unit);
  border-bottom: 1px solid var(--border-color);
  font-weight: 600;
}

.gallery {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  gap: calc(var(--spacing-unit) * 2);
}

.gallery-item {
  aspect-ratio: 1 / 1;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
  border: 3px solid transparent;
  overflow: hidden;
  position: relative;
}
.gallery-item:hover {
  transform: scale(1.05);
  box-shadow: var(--box-shadow-hover);
}
.gallery-item.selected {
  border-color: var(--primary-color);
  box-shadow: var(--box-shadow-hover);
  transform: scale(1.05);
}
.gallery-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

.gallery-item-placeholder {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: var(--secondary-color);
  color: var(--text-light-color);
  gap: calc(var(--spacing-unit) * 0.5);
  padding: var(--spacing-unit);
  box-sizing: border-box;
}
.gallery-item-placeholder span {
  font-size: 0.8rem;
  font-weight: 600;
  letter-spacing: 0.5px;
}
.gallery-item-placeholder .no-preview-text {
  font-size: 0.7rem;
  font-weight: 400;
  color: var(--text-light-color);
}

.upload-actions {
  display: flex;
  align-items: center;
  gap: calc(var(--spacing-unit) * 2);
  flex-wrap: wrap;
  margin-top: calc(var(--spacing-unit) * 4);
}
.upload-actions p {
  margin: 0;
  font-weight: 500;
}

#file-upload {
  display: none;
}

.button {
  display: inline-block;
  padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  font-size: 1rem;
  font-weight: 600;
  border: none;
  text-align: center;
}
.button:disabled {
  background-color: #ccc;
  color: #888;
  cursor: not-allowed;
  transform: none;
}
.button:not(:disabled):hover {
  transform: translateY(-2px);
}

.button-primary {
  background-color: var(--primary-color);
  color: white;
}
.button-primary:not(:disabled):hover {
  background-color: var(--primary-hover-color);
  box-shadow: var(--box-shadow-hover);
}
.button-secondary {
  background-color: var(--secondary-color);
  color: var(--text-color);
}
.button-secondary:not(:disabled):hover {
  background-color: var(--secondary-hover-color);
}

.results-section {
  display: grid;
  grid-template-columns: 1fr;
  gap: calc(var(--spacing-unit) * 4);
}

.image-display, .prompt-display {
  background: white;
  padding: calc(var(--spacing-unit) * 2);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
}

.image-display h3, .prompt-display h3 {
  margin: var(--spacing-unit) 0 calc(var(--spacing-unit) * 2);
  padding-left: var(--spacing-unit);
  color: var(--text-color);
  font-weight: 600;
}

.image-container {
  width: 100%;
  aspect-ratio: 4 / 3;
  background-color: #f0f0f0;
  border-radius: var(--border-radius);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  border: 1px solid var(--border-color);
  position: relative; /* For loader positioning */
}
.image-container img, .image-container video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.image-container .placeholder-text {
  color: var(--text-light-color);
}

.prompt-display {
  margin-top: calc(var(--spacing-unit) * 4);
}
.prompt-content {
  background-color: #f9f9f9;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  padding: calc(var(--spacing-unit) * 2);
  white-space: pre-wrap;
  word-wrap: break-word;
  max-height: 400px;
  overflow-y: auto;
  font-family: 'SF Mono', 'Fira Code', 'Fira Mono', 'Roboto Mono', monospace;
  font-size: 0.9rem;
  line-height: 1.7;
}

.loader-container {
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  background-color: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(4px);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 10;
  color: var(--text-color);
}

.spinner {
  border: 5px solid rgba(0, 0, 0, 0.1);
  border-top: 5px solid var(--primary-color);
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
}

.loader-container p {
  margin-top: calc(var(--spacing-unit) * 2);
  font-size: 1rem;
  font-weight: 500;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.error-message {
  color: var(--error-color);
  background-color: var(--error-bg-color);
  border: 1px solid var(--error-color);
  padding: calc(var(--spacing-unit) * 2);
  border-radius: var(--border-radius);
  margin-top: calc(var(--spacing-unit) * 2);
}

footer {
  text-align: center;
  padding: calc(var(--spacing-unit) * 3);
  margin-top: calc(var(--spacing-unit) * 4);
  background-color: var(--dark-color);
  color: var(--text-light-color);
  font-size: 0.9rem;
}

/* Responsive Design */
@media (min-width: 1024px) {
  .results-section {
    grid-template-columns: 1fr 1fr;
  }
}

<./frontend\src\main.jsx>
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)



<./nginx\nginx.conf>
events {
    worker_connections 1024;
}

http {
    # Increase the maximum allowed size of the client request body.
    # This is necessary for uploading images which are sent as base64 strings.
    client_max_body_size 20M;

    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    # Upstream for the backend API
    upstream backend {
        server backend:8000;
    }

    # Upstream for the frontend dev server
    upstream frontend {
        server frontend:5173;
    }

    server {
        listen 80;
        server_name localhost;

        # Route API requests to the backend
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route root and other requests to the frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket headers for Vite HMR
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}

